I want to create a full-stack website for my medical AI project. The website should include both frontend and backend code, fully structured, with placeholders for my trained models so I can connect them later. The website should have the following features: Home/About Page: Introduce the project, datasets used, and models trained. Describe the purpose of the RAG-based medical QA model and the medicine recommendation model. Include a brief overview of the datasets, such as MedQuADQA . Medical Query Bot Page: Users can input medical questions. Show answers generated by the RAG-based model. Include placeholder code for connecting to the backend model API. Medicine Search Page: Include a search bar to filter medicines based on conditions, causes, side-effects, etc. Display medicine details, usage, and other relevant information from the dataset. Implement intuitive filtering and sorting functionality. Medicine Recommendation System Page: Accept user inputs (symptoms, conditions, etc.). Show recommended medicines using the trained recommendation model. Include placeholder code for connecting to the backend model API. Design Requirements: Professional, clean, and intuitive UI suitable for a college project. Responsive layout with modern styling (cards, tables, search bars, buttons). Navigation between pages. Display dataset insights or visualizations where relevant. Full-Stack Requirements: Generate all frontend and backend files. Backend should be Node.js + Express with API routes for the models. Frontend can be React.js with structured components. Include placeholders in the backend for the models so I can plug in my trained models later. Include data loading from the drugs dataset for search and filtering functionality. Datasets/Models: MedQuADQA dataset for RAG-based medical QA. Drugs-side-effects dataset for medicine search and recommendation. Trained models will be available locally; frontend/backend just needs placeholders. Goal: I want a complete project structure (frontend + backend) ready to run, with intuitive design, routing, API placeholders, dataset integration for search/filtering, and pages as described above.